{"version":3,"sources":["ArrayBar.js","ArrayContainer.js","ButtonSection.js","SortVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["ArrayBar","props","w","h","m","color","className","style","width","height","backgroundColor","margin","ArrayContainer","array","colors","map","value","index","length","key","ButtonSection","sorts","onClick","window","location","reload","merge","insertion","cocktail","bubble","SortVisualizer","getMergeSortAnimations","arr","animations","mergeSort","low","high","mid","Math","floor","i","j","k","push","temp","a","b","getInsertionSortAnimations","getCocktailSortAnimations","odd","getBubbleSortAnimations","getNewArray","min","max","size","randomValue","random","state","arraySize","sortInsertion","bind","sortCoctail","sortBubble","sortMerge","this","setState","Array","fill","arrayBars","document","getElementsByClassName","animation","changedArray","loopStatus","Promise","resolve","reject","setTimeout","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3accaef.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction ArrayBar(props) {\r\n    const {w, h, m, color} = props\r\n    return (\r\n        <div\r\n        className = \"array-bar\"\r\n        style={{\r\n            width: `${w}%`,\r\n            height: h,\r\n            backgroundColor: color,\r\n            margin: `0 ${m}%`\r\n        }}\r\n        >\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ArrayBar","import React from 'react'\r\nimport ArrayBar from './ArrayBar'\r\n\r\nimport './App.css';\r\n\r\nfunction ArrayContainer(props) {\r\n    const {array, colors} = props\r\n    return (\r\n        <div className=\"array-container\">\r\n            {\r\n                array.map((value, index) => {\r\n                return <ArrayBar color={colors[index]} w={70/array.length} h={value} m={15/array.length} key={index} />\r\n                })\r\n            }\r\n        </div>\r\n        \r\n    )\r\n}\r\n// w={(0.92 * containerWidth)/array.length}\r\nexport default ArrayContainer","import React from 'react'\r\n\r\nimport './App.css';\r\n\r\nfunction ButtonSection(props) {\r\n    const {sorts} = props\r\n\r\n    return (\r\n        <div className=\"button-section\">\r\n            <div className=\"d-flex justify-content-center\">\r\n                <button className=\"button\" onClick={() => window.location.reload(false)}>Generate New Array</button><br/>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <button className=\"button\" onClick={sorts.merge}>Merge Sort</button>\r\n                <button className=\"button\" onClick={sorts.insertion}>Insertion Sort</button>\r\n                <button className=\"button\" onClick={sorts.cocktail}>Cocktail Sort</button>\r\n                <button className=\"button\" onClick={sorts.bubble}>Bubble Sort</button>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ButtonSection","import React,  { useEffect, useState, Component } from 'react'\r\nimport ArrayContainer from './ArrayContainer'\r\nimport ButtonSection from './ButtonSection'\r\n\r\n\r\n\r\nclass SortVisualizer extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            arraySize: 50,\r\n            array: [],\r\n            colors: []\r\n        }\r\n        this.sortInsertion = this.sortInsertion.bind(this)\r\n        this.sortCoctail = this.sortCoctail.bind(this)\r\n        this.sortBubble = this.sortBubble.bind(this)\r\n        this.sortMerge = this.sortMerge.bind(this)\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n        this.setState({\r\n            array: this.getNewArray(5, 470, this.state.arraySize),\r\n            colors: new Array(this.state.arraySize).fill(\"#008ECC\")\r\n        })\r\n    }\r\n\r\n    getMergeSortAnimations = (arr) => {\r\n        const animations = []\r\n        function mergeSort(arr, low, high) {\r\n            if(low < high) {\r\n                let mid = Math.floor((low + high) / 2)\r\n                mergeSort(arr, low, mid)\r\n                mergeSort(arr, mid + 1, high)\r\n                merge(arr, low, mid + 1, high)\r\n            }\r\n        }\r\n        function merge (arr, low, mid, high) {\r\n            let i = low,\r\n                j = mid,\r\n                k = low\r\n            while(i <= mid - 1 && j <= high) {\r\n                animations.push([\"select\", i, j])\r\n                animations.push([\"de-select\", i, j])\r\n                if (arr[i] >= arr[j]) {\r\n                    animations.push([\"shift\", i, j-1])\r\n                    let temp = arr[j]\r\n                    let a = i,\r\n                    b = j-1\r\n                    while(b >= a) {\r\n                        arr[b + 1] = arr[b]\r\n                        b--\r\n                    }\r\n\r\n                    animations.push([\"change-height\", k, temp])\r\n                    arr[k] = temp\r\n\r\n                    j++; mid++\r\n                    \r\n                }\r\n                k++\r\n                i++\r\n            }\r\n        }\r\n        mergeSort(arr, 0, arr.length - 1)\r\n        return animations\r\n    }\r\n\r\n    async sortMerge() {\r\n        const animations = this.getMergeSortAnimations([...this.state.array])\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\")\r\n        let animation, loopStatus\r\n        for(let i = 0; i < animations.length; i++) {   \r\n            animation = animations[i]\r\n            if (animation[0] === \"select\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"red\"\r\n                arrayBars[animation[2]].style.backgroundColor = \"red\"\r\n                \r\n            } else if (animation[0] === \"de-select\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"#008ECC\"\r\n                arrayBars[animation[2]].style.backgroundColor = \"#008ECC\"\r\n            \r\n            } else if (animation[0] === \"change-height\"){\r\n                let changedArray = [...this.state.array]\r\n                changedArray[animation[1]] = animation[2]\r\n                this.setState({array: changedArray})\r\n                \r\n            } else if (animation[0] === \"shift\") {\r\n                let changedArray = [...this.state.array]\r\n                let j = animation[2],\r\n                    i = animation[1]\r\n                while(j >= i) {\r\n                    changedArray[j + 1] = changedArray[j]\r\n                    j--\r\n                }\r\n                this.setState({array: changedArray})\r\n            }\r\n            loopStatus = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    resolve(\"loop done\")\r\n                }, 8)\r\n            })\r\n            await loopStatus\r\n        }\r\n        \r\n    }\r\n\r\n    getInsertionSortAnimations = (arr) => {\r\n        const animations = []\r\n        let j, temp\r\n        animations.push([\"sorted\", 0])\r\n        for (let i = 1; i < arr.length; i++) {\r\n            animations.push([\"select\", i])\r\n            j = i\r\n            while (j > 0 && arr[j] < arr[j - 1] ) {\r\n                animations.push([\"swap\", j, arr[j], arr[j - 1]])\r\n                temp = arr[j]\r\n                arr[j] = arr[j - 1]\r\n                arr[j - 1] = temp\r\n                j--\r\n            }\r\n            animations.push([\"sorted\", j])\r\n        }\r\n        return animations\r\n    }\r\n\r\n    async sortInsertion() {\r\n        const animations = this.getInsertionSortAnimations([...this.state.array])\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\")\r\n        let animation, loopStatus\r\n        for(let i = 0; i < animations.length; i++) {   \r\n            animation = animations[i]\r\n            if (animation[0] === \"select\") {\r\n                    arrayBars[animation[1]].style.backgroundColor = \"red\"\r\n                \r\n            } else if (animation[0] === \"sorted\") {\r\n                    arrayBars[animation[1]].style.backgroundColor = \"green\"\r\n                \r\n            } else if (animation[0] === \"swap\"){\r\n                    arrayBars[animation[1]].style.backgroundColor = \"green\"\r\n                    let changedArray = [...this.state.array]\r\n                    changedArray[animation[1]] = animation[3]\r\n                    this.setState({array: changedArray})\r\n                    \r\n                    arrayBars[animation[1] - 1].style.backgroundColor = \"red\"\r\n                    changedArray = [...this.state.array]\r\n                    changedArray[animation[1] - 1] = animation[2]\r\n                    this.setState({array: changedArray})\r\n                \r\n            }\r\n            loopStatus = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    resolve(\"loop done\")\r\n                }, 10)\r\n            })\r\n            await loopStatus\r\n        }\r\n        \r\n    }\r\n\r\n    getCocktailSortAnimations = (arr) => {\r\n        const animations = []\r\n        let i = 0,\r\n            j = arr.length - 1,\r\n            odd = true,\r\n            index\r\n        while(i < j) {\r\n            index = i\r\n            if(odd) {\r\n                for(let k = i; k < j; k++) {\r\n                    animations.push([\"select\", k, k + 1])\r\n                    if(arr[k] > arr[k + 1]) {\r\n                        animations.push([\"swap\", k, k + 1, arr[k], arr[k + 1]])\r\n                        let temp = arr[k]\r\n                        arr[k] = arr[k + 1]\r\n                        arr[k + 1] = temp\r\n                    } else {\r\n                        animations.push([\"no-swap\", k, k + 1])\r\n                    }\r\n                }\r\n                animations.push([\"sorted\", j])\r\n                j--\r\n            } else {\r\n                for(let k = j; k > i; k--) {\r\n                    animations.push([\"select\", k, k - 1])\r\n                    if(arr[k] < arr[k - 1]) {\r\n                        animations.push([\"swap\", k, k - 1, arr[k], arr[k - 1]])\r\n                        let temp = arr[k]\r\n                        arr[k] = arr[k - 1]\r\n                        arr[k - 1] = temp\r\n                    } else {\r\n                        animations.push([\"no-swap\", k, k - 1])\r\n                    }\r\n                }\r\n                animations.push([\"sorted\", i])\r\n                i++\r\n            }\r\n            odd = !odd\r\n        }\r\n        animations.push([\"sorted\", i])\r\n        return animations\r\n    }\r\n\r\n    async sortCoctail() {\r\n        const animations = this.getCocktailSortAnimations([...this.state.array])\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\")\r\n        let animation, loopStatus\r\n        for(let i = 0; i < animations.length; i++) {   \r\n            animation = animations[i]\r\n            if (animation[0] === \"select\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"red\"\r\n                arrayBars[animation[2]].style.backgroundColor = \"red\"\r\n                \r\n            } else if (animation[0] === \"sorted\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"green\"\r\n            \r\n            } else if (animation[0] === \"swap\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"#008ECC\"\r\n                let changedArray = [...this.state.array]\r\n                changedArray[animation[1]] = animation[4]\r\n                this.setState({array: changedArray})\r\n                \r\n                arrayBars[animation[2]].style.backgroundColor = \"#008ECC\"\r\n                changedArray = [...this.state.array]\r\n                changedArray[animation[2]] = animation[3]\r\n                this.setState({array: changedArray})\r\n\r\n            } else if(animation[0] === \"no-swap\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"#008ECC\"\r\n                arrayBars[animation[2]].style.backgroundColor = \"#008ECC\"\r\n            }\r\n            \r\n            loopStatus = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    resolve(\"loop done\")\r\n                }, 0)\r\n            })\r\n            await loopStatus\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    getBubbleSortAnimations = (arr) => {\r\n        const animations = []\r\n        for(let i = arr.length - 1; i > 0; i--) {\r\n            for(let j = 0; j < i; j++) {\r\n                animations.push([\"select\", j])\r\n                if(arr[j] > arr[j + 1]) {\r\n                    animations.push([\"swap\", j, arr[j], arr[j + 1]])\r\n                    let temp = arr[j]\r\n                    arr[j] = arr[j + 1]\r\n                    arr[j + 1] = temp\r\n                } else {\r\n                    animations.push([\"no-swap\", j])\r\n                }\r\n            }\r\n            animations.push([\"sorted\", i])\r\n        }\r\n        animations.push([\"sorted\", 0])\r\n        return animations\r\n    }\r\n\r\n    async sortBubble() {\r\n        const animations = this.getBubbleSortAnimations([...this.state.array])\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\")\r\n        let animation, loopStatus\r\n        for(let i = 0; i < animations.length; i++) {   \r\n            animation = animations[i]\r\n            if (animation[0] === \"select\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"red\"\r\n                arrayBars[animation[1] + 1].style.backgroundColor = \"red\"\r\n                \r\n            } else if (animation[0] === \"sorted\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"green\"\r\n            \r\n            } else if (animation[0] === \"swap\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"#008ECC\"\r\n                let changedArray = [...this.state.array]\r\n                changedArray[animation[1]] = animation[3]\r\n                this.setState({array: changedArray})\r\n                \r\n                arrayBars[animation[1] + 1].style.backgroundColor = \"#008ECC\"\r\n                changedArray = [...this.state.array]\r\n                changedArray[animation[1] + 1] = animation[2]\r\n                this.setState({array: changedArray})\r\n\r\n            } else if(animation[0] === \"no-swap\") {\r\n                arrayBars[animation[1]].style.backgroundColor = \"#008ECC\"\r\n                arrayBars[animation[1] + 1].style.backgroundColor = \"#008ECC\"\r\n            }\r\n            \r\n            loopStatus = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    resolve(\"loop done\")\r\n                }, 0)\r\n            })\r\n            await loopStatus\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    getNewArray = (min, max, size) => {\r\n        const arr = []\r\n        for (let i = 0; i < size; i++) {\r\n            let randomValue = Math.floor(Math.random() * (max - min + 1) + min)\r\n            arr.push(randomValue)\r\n        }\r\n        return arr\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ArrayContainer array={this.state.array} colors={this.state.colors}/>\r\n                <ButtonSection \r\n                sorts={{\r\n                    insertion: this.sortInsertion,\r\n                    cocktail: this.sortCoctail,\r\n                    bubble: this.sortBubble,\r\n                    merge: this.sortMerge\r\n\r\n                }}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SortVisualizer","import React from 'react';\n\nimport SortVisualizer from './SortVisualizer'\n\n\n\nfunction App() {\n\treturn (\n\t\t<SortVisualizer />\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}